package garden.ephemeral.calculator.creals.util

import garden.ephemeral.calculator.creals.Real

/**
 * A scientific notation representation of an approximation to a constructive real.
 * Generated by [Real.toStringFloatRep].
 *
 * @property sign the sign associated with this approximation.  May be -1, +1, or zero.
 * @property mantissaDigits the digits of the mantissa.  The decimal point is implicitly
 *           to the left of the digits, and is not explicitly represented.
 * @property radix the radix of the representation.  Also the base of the exponent field.
 * @property exponent the mantissa is scaled by radix**exponent.
 */
data class ScientificNotation internal constructor(
    val sign: Int,
    val mantissaDigits: List<Int>,
    val radix: Int,
    val exponent: Int,
) {
    init {
        check(sign in -1..1) { "sign ($sign) must be -1..+1" }
        check(radix >= 2) { "radix ($radix) must be 2 or greater" }
    }

    /**
     * Produce a textual representation including the sign and exponent.
     *
     * Suitable for debugging only - to present numbers to the user, use a real formatter.
     *
     * @return the string representation.
     */
    override fun toString(): String {
        val mantissa = mantissaDigits.joinToString(separator = "") { x -> x.toString(radix) }
        return (if (sign < 0) "-" else "") + mantissa + "E" + exponent.toString() + (if (radix == 10) "" else "(radix $radix)")
    }
}
